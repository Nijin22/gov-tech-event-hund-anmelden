plugins {
  id 'groovy'
  // Used to deploy process to SBW/Amt24/OzgHub. Most recent version:
  // https://plugins.gradle.org/plugin/de.seitenbau.serviceportal.prozesspipeline
  // If you update this, dont forget to also update commons/serviceportal/build.gradle as well
  id "de.seitenbau.serviceportal.prozesspipeline" version "2023.09.13-0"
}

// The the public API is maintained by the SchildkrÃ¶ten Team and the most recent version listed on maven central:
// https://central.sonatype.com/artifact/de.seitenbau.serviceportal/prozess-scripting-api
String serviceportalPublicApiVersion = "1.165.4"

repositories {
  mavenCentral()
}

dependencies {
  [
          'org.codehaus.groovy:groovy-all:2.5.22',

          "de.seitenbau.serviceportal:prozess-scripting-api:${serviceportalPublicApiVersion}",

          "org.activiti:activiti-engine:5.22.0",

  ].each { dep ->
    implementation(dep) {
      // Required to remove unneeded logging frameworks that break the build
      // See: https://stackoverflow.com/a/59667631/3298787
      exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
  }

  // Include commons subproject
  implementation project("commons.serviceportal")

  // testing
  implementation group: 'net.bytebuddy', name: 'byte-buddy-gradle-plugin', version: '1.10.1'
  testImplementation "org.spockframework:spock-core:2.0-M1-groovy-2.5"
}

// Set source directories (where to compile and test from)
sourceSets {
  main {
    groovy {
      srcDirs = ["scripts"]
    }
    resources {
      srcDirs = ["scripts"]
    }
  }
  test {
    groovy {
      srcDirs = ["tests"]
    }
    resources {
      srcDirs = ["scripts", "forms"]
    }
  }
}

test {
  // Enable logging of test results
  testLogging {
    events "passed", "skipped", "failed"
  }

  // Enforce JUnit for Spock runs (see https://blog.solidsoft.pl/2020/01/02/migrating-spock-1.3-tests-to-spock-2.0/ )
  useJUnitPlatform()

  // Fail the build if no rests were run.
  afterSuite { desc, result ->
    if (!desc.parent) {
      if (result.testCount == 0) {
        throw new IllegalStateException("No tests were found. Failing the build")
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configure SBW build tasks                                                                             //
// From: https://github.com/Seitenbau/Vorlage-Prozessmodellierung-Serviceportal/blob/master/build.gradle //
// These statements should be moved to the gradle plugin at some point, but are not yet (2020-09-29)     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

def getVariableValue(name, defaultValue) {
  return project.hasProperty(name) ? project.property(name) : defaultValue
}

mergeScripts {
  environment = getVariableValue('environment', 'default')
  debug = getVariableValue('debug', false)
}

buildModel {
  environment = getVariableValue('environment', 'default')
  debug = getVariableValue('debug', false)
  dependsOn 'mergeScripts'
}

uploadProcessModelFiles {
  environment = getVariableValue('environment', 'default')
  debug = getVariableValue('debug', false)
}

uploadFormularFiles {
  environment = getVariableValue('environment', 'default')
  debug = getVariableValue('debug', false)
}

uploadAndDeployFormularFiles {
  environment = getVariableValue('environment', 'default')
  debug = getVariableValue('debug', false)
}

deployProcessModelVersion {
  environment = getVariableValue('environment', 'default')
  debug = getVariableValue('debug', false)
}

uploadParameterDefinition {
  environment = getVariableValue('environment', 'default')
  debug = getVariableValue('debug', false)
}

getAuthorizationToken {
  environment = getVariableValue('environment', 'default')
  mandant = getVariableValue('mandant', null)
  debug = getVariableValue('debug', false)
}

startLocalHttpServer {
  environment = getVariableValue('environment', 'default')
  port = getVariableValue('port', "0")
}

task mergeBuild {
  doFirst {
    clean
  }
  dependsOn 'buildModel'
  dependsOn 'mergeScripts'
  tasks.findByName('buildModel').mustRunAfter 'mergeScripts'
}

task upload {
  doFirst {
    clean
  }
  dependsOn 'mergeBuild'
  dependsOn 'uploadProcessModelFiles'
  dependsOn 'uploadFormularFiles'
  dependsOn 'uploadParameterDefinition'
  tasks.findByName('uploadProcessModelFiles').mustRunAfter 'buildModel'
  tasks.findByName('uploadParameterDefinition').mustRunAfter 'uploadProcessModelFiles'
}

task uploadAndDeploy {
  doFirst {
    clean
  }
  dependsOn 'mergeBuild'
  dependsOn 'uploadProcessModelFiles'
  dependsOn 'uploadAndDeployFormularFiles'
  dependsOn 'uploadParameterDefinition'
  dependsOn 'deployProcessModelVersion'
  tasks.findByName('uploadProcessModelFiles').mustRunAfter 'buildModel'
  tasks.findByName('uploadParameterDefinition').mustRunAfter 'uploadProcessModelFiles'
  tasks.findByName('deployProcessModelVersion').mustRunAfter 'uploadParameterDefinition'
}
